"use client";

import { useState } from "react";

interface DetailedInfo {
  header: string;
  description: string;
  process?: string;
  streams?: string[];
  steps?: string[];
  stages?: (string | { title: string; details: string })[];
  factors?: string[];
  types?: { title: string; details: string }[];
  processes?: string[];
  uses?: string[];
  features?: string[];
  note?: string;
  specs?: string[];
}

interface ProcessStep {
  step: string;
  title: string;
  description: string;
  icon: string;
  detailedInfo: DetailedInfo;
}

const SolutionSection = () => {
  const [activeModal, setActiveModal] = useState<number | null>(null);

  const processSteps: ProcessStep[] = [
    {
      step: "01",
      title: "Waste Collection & Sorting",
      description:
        "Automated collection of all organic and inorganic materials",
      icon: "🧩",
      detailedInfo: {
        header: "What goes in must come out… as something useful.",
        description:
          "All solid waste generated by the crew — from food scraps and plastic pouches to used gloves and metal scraps — is collected through sealed chutes or robotic arms directly into the Nature Capsule.",
        process:
          "Inside, a smart sorting unit uses infrared sensors, conductivity tests, and magnetic separation to automatically divide waste into five streams:",
        streams: [
          "Organics (food, paper, feces)",
          "Plastics & polymers",
          "Metals (aluminum, steel)",
          "Glass",
          "Mixed/inert materials",
        ],
        note: "This ensures every material follows its optimal recycling path — with zero manual sorting required.",
        specs: [
          "🔧 Throughput: 5–10 kg/day",
          "🔧 Automation: Sensor-based",
          "🔧 Environment: Pressurized habitat",
        ],
      },
    },
    {
      step: "02",
      title: "Preprocessing – Shred, Dry, Separate",
      description: "Intelligent separation and moisture removal",
      icon: "🔪",
      detailedInfo: {
        header: "Smaller pieces, drier inputs, better outputs.",
        description: "Before conversion, waste must be prepared.",
        process: "Each sorted stream is processed:",
        steps: [
          "Shredded into small, uniform particles (<5 cm)",
          "Dried under low pressure (0.1–0.3 atm) at 60–80°C to remove moisture without triggering decomposition",
          "Cleaned for metals and glass; organics and plastics move to conversion",
        ],
        note: "The recovered water is condensed and sent back into the habitat's life support loop.",
        specs: [
          "💧 Moisture recovery: >90%",
          "💧 Final moisture: <5%",
          "💧 Energy-efficient drying",
        ],
      },
    },
    {
      step: "03",
      title: "Waste-to-CO₂ Unit (Hybrid Conversion)",
      description: "Catalytic oxidation and plasma gasification process",
      icon: "🔥",
      detailedInfo: {
        header: "Turning trash into breathable air — safely and efficiently.",
        description:
          "This is where magic happens: converting non-metallic waste into pure carbon dioxide (CO₂), the fuel for life.",
        process: "We use a two-stage hybrid process:",
        stages: [
          {
            title: "🔹 Primary: Catalytic Oxidation (90%)",
            details:
              "Waste is heated to 300–600°C with a catalyst (Pt/Al₂O₃ or MnO₂). This breaks down organics and plastics cleanly:\nCₓHᵧ + O₂ → CO₂ + H₂O + Heat\nNo flames. No soot. Just clean gas.",
          },
          {
            title: "🔹 Backup: Plasma Gasification (10%)",
            details:
              "For tough or contaminated waste (e.g., perchlorate-laden dust), an electric arc plasma torch reaches 3,000–7,000°C, breaking all molecular bonds. Syngas is re-oxidized to CO₂.",
          },
        ],
        note: "Safe, flameless, complete breakdown | Handles mixed and toxic inputs",
        specs: [],
      },
    },
    {
      step: "04",
      title: "Gas Cleanup & Purification",
      description: "Clean CO₂ extraction for biological systems",
      icon: "🌀",
      detailedInfo: {
        header: "From exhaust to ecosystem-ready air.",
        description:
          "Raw gas from conversion contains impurities like carbon monoxide (CO), VOCs, ash, and microbes — not safe for plants or people.",
        process:
          "A multi-stage purification system removes everything harmful:",
        stages: [
          "Cyclone Separator: Removes ash and particulates",
          "Catalytic Scrubber: Converts CO → CO₂",
          "Activated Carbon Filter: Traps volatile organic compounds",
          "Condenser: Recovers water vapor",
          "HEPA + UV Sterilizer: Kills bacteria and viruses",
        ],
        note: "The result? Ultra-pure CO₂, ready to feed algae and crops.",
        specs: ["🧪 CO < 50 ppm", "🧪 Microbe-free", "🧪 Water recovery >90%"],
      },
    },
    {
      step: "05",
      title: "CO₂ Storage & Buffering",
      description: "Controlled storage for steady biological consumption",
      icon: "🫠",
      detailedInfo: {
        header: "Storing tomorrow's oxygen today.",
        description:
          "Purified CO₂ is compressed to 30–50 bar and stored in lightweight titanium tanks. A smart control system regulates flow based on:",
        factors: [
          "Time of day (light/dark cycles)",
          "Algae growth rate",
          "Crew O₂ demand",
        ],
        note: "Mass flow controllers deliver a steady stream (0.5–2 L/min) to bioreactors — ensuring continuous photosynthesis and stable atmospheric balance.",
        specs: [
          "📡 Automated feedback from O₂ sensors",
          "📡 Emergency relief valves for safety",
        ],
      },
    },
    {
      step: "06",
      title: "Bioreactors – Algae, Duckweed, Crops",
      description: "Algae, duckweed, and crops convert CO₂ to oxygen and food",
      icon: "🌱",
      detailedInfo: {
        header: "Life from waste: growing food and oxygen with light.",
        description:
          "Using sunlight or LEDs, these living systems turn CO₂ and nutrients into oxygen and edible biomass via photosynthesis.",
        process: "Three types work together:",
        types: [
          {
            title: "Microalgae PBRs (Spirulina, Chlorella):",
            details: "Fast-growing, protein-rich, produce O₂ continuously",
          },
          {
            title: "Duckweed Ponds:",
            details:
              "Floating plant that doubles daily; high in protein and easy to harvest",
          },
          {
            title: "C4 Crops (wheat, sweet potato):",
            details:
              "Provide calories and variety in diet; thrive in CO₂-enriched air",
          },
        ],
        note: "Nutrients come from urine recycling (struvite recovery), closing the loop.",
        specs: [
          "💡 LED lighting (red/blue spectrum)",
          "💡 Automated monitoring",
          "💡 PAR: 100–200 µmol/m²/s",
        ],
      },
    },
    {
      step: "07",
      title: "Biomass Harvest & Food Processing",
      description: "Automated collection of nutritious biomass",
      icon: "🍽️",
      detailedInfo: {
        header: "From pond to plate — nutritious, safe, space-grown food.",
        description: "Harvested biomass is processed into edible forms:",
        processes: [
          "Algae: Centrifuged → dried → turned into powder or tablets",
          "Duckweed: Skimmed, washed, cooked or dried into flour",
          "Crops: Harvested, cleaned, prepared for meals",
        ],
        note: "All products undergo UV sterilization and mycotoxin testing before packaging in vacuum-sealed bags.",
        specs: [
          "🥗 Output: ~1–2 kg/day edible biomass per person",
          "🥗 High in protein, vitamins, fiber",
        ],
      },
    },
    {
      step: "08",
      title: "Metal & Glass Recycling (Perchlorate-Safe)",
      description: "Perchlorate-safe recovery of structural materials",
      icon: "♻️",
      detailedInfo: {
        header: "Rebuilding tools from yesterday's trash — safely on Mars.",
        description:
          "Martian dust contains toxic perchlorates (ClO₄⁻) that can poison recycled materials. The Nature Capsule solves this.",
        process:
          "🔹 Perchlorate Removal\nMetals and glass are treated in a fluidized bed reactor with Fe₂O₃ catalyst at 300°C, breaking perchlorates into harmless chloride and oxygen:\nClO₄⁻ → Cl⁻ + 2O₂\n\nWash water removes salts (NaCl), leaving clean material.",
        stages: [
          {
            title: "🔹 Recycling Process",
            details:
              "Metals: Melted in induction furnace (1500°C) → cast into ingots or 3D-printing wire\nGlass: Sintered using solar concentrators → formed into radiation-shielding bricks or panels",
          },
        ],
        note: "Output: 1.2 kg/day metal ingots | 0.3 kg/day glass blocks | Fully reusable",
        specs: [
          "🛠 Output: 1.2 kg/day metal ingots",
          "🛠 Output: 0.3 kg/day glass blocks",
          "🛠 Fully reusable",
        ],
      },
    },
    {
      step: "09",
      title: "Thermal Integration & Heat Recovery",
      description: "Thermal energy capture and redistribution",
      icon: "🔥",
      detailedInfo: {
        header: "Waste heat? We reuse that too.",
        description:
          "The conversion process generates significant heat — instead of venting it, we capture and reuse it across the system:",
        uses: [
          "Dries incoming wet waste",
          "Warms bioreactors for optimal plant growth",
          "Charges phase-change material (PCM) batteries for night-time heating",
          "Supplements habitat warmth during cold sols",
        ],
        note: "Heat exchangers (shell-and-tube, plate) and passive ammonia heat pipes distribute energy efficiently.",
        specs: [
          "🌡 Energy recovery up to 40%",
          "🌡 Reduces electrical load",
          "🌡 Self-regulating loops",
        ],
      },
    },
    {
      step: "10",
      title: "Automation, Monitoring & Safety",
      description: "Continuous monitoring with minimal crew oversight",
      icon: "🖥️",
      detailedInfo: {
        header: "Minimal crew time. Maximum reliability.",
        description:
          "Astronauts have better things to do than babysit a recycler.",
        process: "The Nature Capsule runs autonomously with:",
        features: [
          "Real-time sensors (CO₂, O₂, pH, turbidity, temperature)",
          "Remote telemetry to Earth",
          "AI-assisted diagnostics",
          "Emergency dump valve and containment filters",
        ],
        note: "Safety layers include HEPA + UV sterilization, Ozone (O₃) and autoclave cycles, Redundant filtration, and Containment protocols for hazardous inputs.",
        specs: [
          "👨‍🚀 Crew oversight: <30 min/day",
          "👨‍🚀 Fail-safe design",
          "👨‍🚀 Mars-Earth connectivity",
        ],
      },
    },
  ];

  return (
    <section
      id="solution"
      className="py-20 bg-gradient-to-b from-slate-900 to-slate-800"
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6">
            The <span className="text-green-400">Solution</span>: How It Works
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
            The Nature Capsule transforms waste into life through a
            revolutionary 10-stage closed-loop process. This isn&apos;t
            traditional recycling—it&apos;s biological regeneration.
          </p>
        </div>

        {/* Process Overview */}
        <div className="bg-gradient-to-r from-green-900/30 to-blue-900/30 rounded-2xl p-8 mb-16 border border-green-500/20">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-green-400 mb-4">
              Closed-Loop Design
            </h3>
            <div className="flex flex-wrap justify-center items-center gap-4 text-lg">
              <span className="bg-red-500/20 px-4 py-2 rounded-full text-red-300">
                Waste In
              </span>
              <span className="text-orange-400">→</span>
              <span className="bg-blue-500/20 px-4 py-2 rounded-full text-blue-300">
                Processing
              </span>
              <span className="text-orange-400">→</span>
              <span className="bg-green-500/20 px-4 py-2 rounded-full text-green-300">
                Resources Out
              </span>
            </div>
          </div>
        </div>

        {/* Process Steps */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16">
          {processSteps.map((step, index) => (
            <div
              key={index}
              className="bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-green-500/20 hover:border-green-500/40 transition-all duration-300 group relative"
            >
              <div className="flex items-center mb-4">
                <div className="text-2xl mr-3">{step.icon}</div>
                <div className="text-sm font-bold text-green-400 bg-green-500/20 px-2 py-1 rounded">
                  STEP {step.step}
                </div>
              </div>
              <h3 className="text-xl font-semibold text-white mb-3 group-hover:text-green-400 transition-colors">
                {step.title}
              </h3>
              <p className="text-gray-300 leading-relaxed mb-4">
                {step.description}
              </p>

              {/* Read More Button */}
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setActiveModal(index);
                }}
                className="w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center justify-center gap-2"
              >
                <span>Read More</span>
                <svg
                  className="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 7l5 5m0 0l-5 5m5-5H6"
                  />
                </svg>
              </button>

              {/* Modal */}
              {activeModal === index && (
                <div className="fixed inset-0 z-[9999] flex items-center justify-center p-4">
                  {/* Backdrop */}
                  <div
                    className="absolute inset-0 bg-black/50 backdrop-blur-sm z-[10000]"
                    onClick={() => setActiveModal(null)}
                  ></div>

                  {/* Modal Content */}
                  <div className="relative bg-slate-900/95 backdrop-blur-sm rounded-xl p-6 border border-green-500/40 shadow-2xl max-h-[90vh] w-full max-w-3xl overflow-y-auto transform transition-all duration-300 ease-out scale-100 animate-in fade-in-0 zoom-in-95 z-[10001]">
                    {/* Close Button */}
                    <button
                      onClick={() => setActiveModal(null)}
                      className="absolute top-4 right-4 text-gray-400 hover:text-white text-2xl font-bold z-[10002]"
                    >
                      ×
                    </button>

                    <div className="text-center mb-4">
                      <div className="text-3xl mb-2">{step.icon}</div>
                      <h4 className="text-lg font-bold text-green-400 mb-2">
                        {step.detailedInfo.header}
                      </h4>
                    </div>

                    <div className="text-sm text-gray-300 space-y-3">
                      <p className="leading-relaxed">
                        {step.detailedInfo.description}
                      </p>

                      {step.detailedInfo.process && (
                        <div>
                          <p className="font-semibold text-white mb-2">
                            {step.detailedInfo.process}
                          </p>

                          {/* Handle different data structures */}
                          {step.detailedInfo.streams && (
                            <ul className="list-disc list-inside space-y-1 ml-4">
                              {step.detailedInfo.streams.map((stream, i) => (
                                <li key={i}>{stream}</li>
                              ))}
                            </ul>
                          )}

                          {step.detailedInfo.steps && (
                            <ul className="list-disc list-inside space-y-1 ml-4">
                              {step.detailedInfo.steps.map((s, i) => (
                                <li key={i}>{s}</li>
                              ))}
                            </ul>
                          )}

                          {step.detailedInfo.stages && (
                            <ul className="list-disc list-inside space-y-2 ml-4">
                              {step.detailedInfo.stages.map((stage, i) => (
                                <li key={i}>
                                  {typeof stage === "string" ? (
                                    stage
                                  ) : (
                                    <div>
                                      <div className="font-semibold text-white">
                                        {stage.title}
                                      </div>
                                      <div className="ml-2">
                                        {stage.details}
                                      </div>
                                    </div>
                                  )}
                                </li>
                              ))}
                            </ul>
                          )}

                          {step.detailedInfo.factors && (
                            <ul className="list-disc list-inside space-y-1 ml-4">
                              {step.detailedInfo.factors.map(
                                (factor: string, i: number) => (
                                  <li key={i}>{factor}</li>
                                )
                              )}
                            </ul>
                          )}

                          {step.detailedInfo.types && (
                            <ul className="list-disc list-inside space-y-2 ml-4">
                              {step.detailedInfo.types.map((type, i) => (
                                <li key={i}>
                                  <div className="font-semibold text-white">
                                    {type.title}
                                  </div>
                                  <div className="ml-2">{type.details}</div>
                                </li>
                              ))}
                            </ul>
                          )}

                          {step.detailedInfo.processes && (
                            <ul className="list-disc list-inside space-y-1 ml-4">
                              {step.detailedInfo.processes.map(
                                (process: string, i: number) => (
                                  <li key={i}>{process}</li>
                                )
                              )}
                            </ul>
                          )}

                          {step.detailedInfo.uses && (
                            <ul className="list-disc list-inside space-y-1 ml-4">
                              {step.detailedInfo.uses.map(
                                (use: string, i: number) => (
                                  <li key={i}>{use}</li>
                                )
                              )}
                            </ul>
                          )}

                          {step.detailedInfo.features && (
                            <ul className="list-disc list-inside space-y-1 ml-4">
                              {step.detailedInfo.features.map((feature, i) => (
                                <li key={i}>{feature}</li>
                              ))}
                            </ul>
                          )}

                          {step.detailedInfo.process &&
                            step.detailedInfo.process.includes("\n") && (
                              <pre className="whitespace-pre-wrap bg-slate-800/50 p-3 rounded text-xs">
                                {step.detailedInfo.process}
                              </pre>
                            )}
                        </div>
                      )}

                      {step.detailedInfo.note && (
                        <div className="bg-green-900/20 border border-green-500/30 rounded p-3 mt-3">
                          <p className="font-semibold text-green-400">
                            {step.detailedInfo.note}
                          </p>
                        </div>
                      )}

                      {step.detailedInfo.specs &&
                        step.detailedInfo.specs.length > 0 && (
                          <div className="mt-3">
                            <div className="flex flex-wrap gap-2">
                              {step.detailedInfo.specs.map((spec, i) => (
                                <span
                                  key={i}
                                  className="bg-blue-500/20 text-blue-300 px-2 py-1 rounded text-xs"
                                >
                                  {spec}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Key Technologies */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          <div>
            <h3 className="text-3xl font-bold text-white mb-6">
              Revolutionary{" "}
              <span className="text-orange-400">Technologies</span>
            </h3>

            <div className="space-y-6">
              <div className="flex items-start space-x-4">
                <div className="text-2xl">🔥</div>
                <div>
                  <h4 className="text-lg font-semibold text-orange-400 mb-2">
                    Catalytic Oxidation
                  </h4>
                  <p className="text-gray-300">
                    Safely breaks down organic waste into CO₂ without harmful
                    emissions
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="text-2xl">⚡</div>
                <div>
                  <h4 className="text-lg font-semibold text-blue-400 mb-2">
                    Plasma Gasification
                  </h4>
                  <p className="text-gray-300">
                    Ultra-high temperature processing for complete material
                    breakdown
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="text-2xl">🌱</div>
                <div>
                  <h4 className="text-lg font-semibold text-green-400 mb-2">
                    Bioregenerative Systems
                  </h4>
                  <p className="text-gray-300">
                    Microalgae, duckweed, and hydroponic farms turn CO₂ into
                    life
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="text-2xl">🛡️</div>
                <div>
                  <h4 className="text-lg font-semibold text-purple-400 mb-2">
                    Perchlorate Safety
                  </h4>
                  <p className="text-gray-300">
                    Iron oxide catalysts remove toxic Martian soil contaminants
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-slate-800/30 rounded-2xl p-8 border border-orange-500/20">
            <h4 className="text-xl font-bold text-center text-orange-400 mb-6">
              System Efficiency
            </h4>

            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Daily Crew Time</span>
                <span className="text-green-400 font-semibold">
                  &lt; 30 minutes
                </span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className="bg-green-500 h-2 rounded-full"
                  style={{ width: "10%" }}
                ></div>
              </div>

              <div className="flex justify-between items-center">
                <span className="text-gray-300">Waste Recovery Rate</span>
                <span className="text-green-400 font-semibold">95%+</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className="bg-green-500 h-2 rounded-full"
                  style={{ width: "95%" }}
                ></div>
              </div>

              <div className="flex justify-between items-center">
                <span className="text-gray-300">Energy Efficiency</span>
                <span className="text-green-400 font-semibold">90%+</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className="bg-green-500 h-2 rounded-full"
                  style={{ width: "90%" }}
                ></div>
              </div>
            </div>
          </div>
        </div>

        {/* Bottom CTA */}
        <div className="text-center mt-16">
          <div className="bg-gradient-to-r from-green-900/50 to-blue-900/50 rounded-2xl p-8 border border-green-500/30">
            <h3 className="text-2xl font-bold text-white mb-4">
              More than technology.{" "}
              <span className="text-green-400">
                It&apos;s how we build a future.
              </span>
            </h3>
            <p className="text-lg text-gray-300 mb-6">
              On Mars, nothing is wasted. Every piece of trash becomes the
              foundation of survival.
            </p>
            <div className="text-3xl text-green-400 font-bold">
              From the trash up.
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default SolutionSection;
